package main

import (
  "html/template"
  "io/ioutil"
  "net/http"
  "log"
  "fmt"
  "regexp"
  "errors"
)


var templates = template.Must(template.ParseFiles("edit.html", "view.html"))
var validPath = regexp.MustCompile("^/(edit|save|view)/([a-zA-Z0-9]+)$")

// Page struct describes how page data will be stored in memory.
type Page struct {
    Title string
    Body []byte // this is the type expected by io library to be used
}


// save() method describes how page data stored on hdd (in a file)
  // save()'s signnature:
    // 1- takes a receiver p, a pointer to Page 2- takes no arguments 3- returns a value of type error

func (p *Page) save() error {
  filename := p.Title + ".txt"
  return ioutil.WriteFile(filename, p.Body, 0600)
}



// loads()'s signnature:
  // 1- takes title arguments 2- returns pointer to Page constructed with proper title and body values

func loadPage(title string) (*Page, error) {
  filename := title + ".txt"
  body, err := ioutil.ReadFile(filename)
  if err != nil {
    return nil, err
  }
  return &Page{Title: title, Body: body}, nil
}


// rewriting renderTemplate
func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
  err := templates.ExecuteTemplate(w, tmpl + ".html", p)
  if err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
  }
}

// func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
//     t, err := template.ParseFiles(tmpl + ".html") // read edit.html and return a *template.Template.

//     if err != nil {
//       http.Error(w, err.Error(), http.StatusInternalServerError)
//       return
//     }

//     err = t.Execute(w, p) // executes the template and writes the generated HTML to the http.ResponseWriter
//     // The .Title and .Body dotted identifiers refer to p.Title and p.Body.
//     if err != nil {
//       http.Error(w, err.Error(), http.StatusInternalServerError)
//     }
// }

func getTitle(w http.ResponseWriter,  r *http.Request)  (string, error) {
  m := validPath.FindStringSubmatch(r.URL.Path)
  if m == nil {
    http.NotFound(w, r)
    return "", errors.New("Invalid Page Title")
  }
  return m[2], nil  // The title is the second subexpression.

}
func handler(w http.ResponseWriter, r *http.Request) {
  // http.ResponseWriter assmebles the response of the server
  // http.Request is the data structure representing HTTP request came from client
   // [1:] drops 1st char so "/abc" in localhost/abc becomes "abc"
  fmt.Fprintf(w, "Hi there, I love %s \n", r.URL.Path[1:])
}


func viewHandler(w http.ResponseWriter, r *http.Request) {
  // title := r.URL.Path[len("/view/"):]
  title, err := getTitle(w, r)

  // [len("/view/"):] drops number of chars in /view/ ie 5
  p, err := loadPage(title)
  if err != nil {
    http.Redirect(w, r, "/edit/" + title, http.StatusFound)
    return
  }
  renderTemplate(w, "view", p)

}



func editHandler(w http.ResponseWriter, r *http.Request) {
  // title := r.URL.Path[len("/edit/"):]
  title, err := getTitle(w, r)

  p, err := loadPage(title)
  if err != nil {
    p = &Page{Title: title}
  }
  renderTemplate(w,"edit", p)
}


/// why use http/template??
 // The html/template package helps guarantee that only safe and correct-looking HTML is generated by template actions. For instance, it automatically escapes any greater than sign (>), replacing it with &gt;, to make sure user data does not corrupt the form HTML.

func saveHandler(w http.ResponseWriter, r *http.Request) {
  // title := r.URL.Path[len("/save/"):]
  title, err := getTitle(w, r)
  if err != nil {
    return
  }


  body_str := r.FormValue("body")
  p := &Page{Title: title, Body:[]byte(body_str)}
  p.save()
  http.Redirect(w, r, "/view/"+title, http.StatusFound)

}


func main() {
  p1 := &Page{Title: "TestPage", Body: []byte("this is test body") }
  p1.save()
  p2, _ := loadPage("TestPage")
  fmt.Println(string(p2.Body))



  // handle all the request to root "/" with handler func


   http.HandleFunc("/view/", viewHandler)
   http.HandleFunc("/edit/", editHandler)
   http.HandleFunc("/save/", saveHandler)

  log.Fatal(http.ListenAndServe(":8080", nil))






}




